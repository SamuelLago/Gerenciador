Protocolo de comunicação ⇒ Forma de comunicação entre dois serviços na rede. 

Exemplos: 
	SSH ⇒ Chave privada(Serviço 1) e chave pública(Serviço 2)

	GIT ⇒ Versionamento de código ()

Navegação

	$ mkdir projects ⇒ Cria um diretório(pasta)
	$ cd projects ⇒ Acessa o diretório 
	$ cd ..  ⇒ Sai do diretório 
	$ cd /  ⇒ Volta para a raiz do computador
	$ cd ~ ⇒ Volta para a raiz do sistema do usuário
	$ clear ⇒ Limpa o terminal
	$ touch ⇒ cria arquivo
	$ nano (arquivo) = altera arquivo
	$ cat (arquivo) = mostra o arquivo
	$ ls => Mostra os possiveis diretorios
	$ rm (arquivo) => Deleta o arquivo

Verificação

	$ git status ⇒ Verifica qual arquivo que foi modificado
	$ git diff ⇒ Mostra o que foi modificado

Versionamento

	$ git add . ⇒ adiciona todos os arquivos a partir dessa pasta
	$ git commit --m (mensagem) ⇒ Cria a versão local
	$ git log ⇒ histórico de versões (HEAD versão mais atual, origin versão no servidor)
	$ git push ⇒ Envia a nova versão para o servidor
	$ git init = Cria o versionamento local

Repositorio

	$ git remote add (nome) => Abre a configuracao do servidor local com o servidor remoto 

Padronizacao commits:

	•FEAT Commits, that adds or remove a new feature
	•FIX Commits, that fixes a bug
	•REFACTOR Commits, that rewrite/restructure your code, however does not change any API behaviour
	•PERF Commits are special refactor commits, that improve performance
	•STYLE Commits, that do not affect the meaning (white-space, formatting, missing semi-colons, etc)
	•TEST Commits, that add missing tests or correcting existing tests
	•DOCS Commits, that affect documentation only
	•BUILD Commits, that affect build components like build tool, ci pipeline, dependencies, project version, ...
	•OPS Commits, that affect operational components like infrastructure, deployment, backup, recovery, ...
	•CHORE Miscellaneous commits e.g. modifying .gitignore

Git e Github
Python, GO.
Linguagem markdown
Banco de dados (SQL)
Docker


